{"ast":null,"code":"// Enhanced provider matching algorithm\nexport const matchProviders = (userData, providers) => {\n  const {\n    symptoms,\n    insurance\n  } = userData;\n\n  // Symptom to specialty mapping\n  const symptomSpecialtyMap = {\n    'rash': ['Dermatologist'],\n    'skin': ['Dermatologist'],\n    'acne': ['Dermatologist'],\n    'chest pain': ['Cardiologist', 'Primary Care Physician'],\n    'heart': ['Cardiologist'],\n    'headache': ['Neurologist', 'Primary Care Physician'],\n    'migraine': ['Neurologist'],\n    'back pain': ['Orthopedic Surgeon', 'Primary Care Physician'],\n    'joint pain': ['Orthopedic Surgeon'],\n    'fever': ['Primary Care Physician'],\n    'cough': ['Primary Care Physician'],\n    'fatigue': ['Primary Care Physician']\n  };\n\n  // Determine relevant specialties based on symptoms\n  const relevantSpecialties = [];\n  const symptomLower = symptoms.toLowerCase();\n  Object.entries(symptomSpecialtyMap).forEach(([symptom, specialties]) => {\n    if (symptomLower.includes(symptom)) {\n      relevantSpecialties.push(...specialties);\n    }\n  });\n\n  // If no specific symptoms match, default to primary care\n  if (relevantSpecialties.length === 0) {\n    relevantSpecialties.push('Primary Care Physician');\n  }\n\n  // Filter and score providers\n  const scoredProviders = providers.filter(provider => provider.accepted_insurances.includes(insurance)).map(provider => {\n    let score = 0;\n\n    // Specialty match (highest weight)\n    if (relevantSpecialties.includes(provider.specialty)) {\n      score += 50;\n    } else if (provider.specialty === 'Primary Care Physician') {\n      score += 20; // PCP gets some points as fallback\n    }\n\n    // Rating (0-5 scale, multiply by 10)\n    score += provider.rating * 10;\n\n    // Wait time (shorter is better, max 30 points)\n    const waitMinutes = parseInt(provider.wait_time);\n    if (waitMinutes <= 15) score += 30;else if (waitMinutes <= 30) score += 20;else if (waitMinutes <= 60) score += 10;\n\n    // Experience bonus (up to 10 points)\n    const experienceYears = parseInt(provider.experience);\n    if (experienceYears >= 15) score += 10;else if (experienceYears >= 10) score += 7;else if (experienceYears >= 5) score += 5;\n    return {\n      ...provider,\n      matchScore: score,\n      specialtyMatch: relevantSpecialties.includes(provider.specialty),\n      relevantSpecialties\n    };\n  }).sort((a, b) => b.matchScore - a.matchScore).slice(0, 3);\n  return scoredProviders;\n};\n\n// Calculate distance between two coordinates (Haversine formula)\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};","map":{"version":3,"names":["matchProviders","userData","providers","symptoms","insurance","symptomSpecialtyMap","relevantSpecialties","symptomLower","toLowerCase","Object","entries","forEach","symptom","specialties","includes","push","length","scoredProviders","filter","provider","accepted_insurances","map","score","specialty","rating","waitMinutes","parseInt","wait_time","experienceYears","experience","matchScore","specialtyMatch","sort","a","b","slice","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","sin","cos","c","atan2","sqrt"],"sources":["D:/v1/frontend/src/utils/providerMatching.js"],"sourcesContent":["// Enhanced provider matching algorithm\r\nexport const matchProviders = (userData, providers) => {\r\n  const { symptoms, insurance } = userData;\r\n  \r\n  // Symptom to specialty mapping\r\n  const symptomSpecialtyMap = {\r\n    'rash': ['Dermatologist'],\r\n    'skin': ['Dermatologist'],\r\n    'acne': ['Dermatologist'],\r\n    'chest pain': ['Cardiologist', 'Primary Care Physician'],\r\n    'heart': ['Cardiologist'],\r\n    'headache': ['Neurologist', 'Primary Care Physician'],\r\n    'migraine': ['Neurologist'],\r\n    'back pain': ['Orthopedic Surgeon', 'Primary Care Physician'],\r\n    'joint pain': ['Orthopedic Surgeon'],\r\n    'fever': ['Primary Care Physician'],\r\n    'cough': ['Primary Care Physician'],\r\n    'fatigue': ['Primary Care Physician']\r\n  };\r\n\r\n  // Determine relevant specialties based on symptoms\r\n  const relevantSpecialties = [];\r\n  const symptomLower = symptoms.toLowerCase();\r\n  \r\n  Object.entries(symptomSpecialtyMap).forEach(([symptom, specialties]) => {\r\n    if (symptomLower.includes(symptom)) {\r\n      relevantSpecialties.push(...specialties);\r\n    }\r\n  });\r\n\r\n  // If no specific symptoms match, default to primary care\r\n  if (relevantSpecialties.length === 0) {\r\n    relevantSpecialties.push('Primary Care Physician');\r\n  }\r\n\r\n  // Filter and score providers\r\n  const scoredProviders = providers\r\n    .filter(provider => provider.accepted_insurances.includes(insurance))\r\n    .map(provider => {\r\n      let score = 0;\r\n      \r\n      // Specialty match (highest weight)\r\n      if (relevantSpecialties.includes(provider.specialty)) {\r\n        score += 50;\r\n      } else if (provider.specialty === 'Primary Care Physician') {\r\n        score += 20; // PCP gets some points as fallback\r\n      }\r\n      \r\n      // Rating (0-5 scale, multiply by 10)\r\n      score += provider.rating * 10;\r\n      \r\n      // Wait time (shorter is better, max 30 points)\r\n      const waitMinutes = parseInt(provider.wait_time);\r\n      if (waitMinutes <= 15) score += 30;\r\n      else if (waitMinutes <= 30) score += 20;\r\n      else if (waitMinutes <= 60) score += 10;\r\n      \r\n      // Experience bonus (up to 10 points)\r\n      const experienceYears = parseInt(provider.experience);\r\n      if (experienceYears >= 15) score += 10;\r\n      else if (experienceYears >= 10) score += 7;\r\n      else if (experienceYears >= 5) score += 5;\r\n      \r\n      return {\r\n        ...provider,\r\n        matchScore: score,\r\n        specialtyMatch: relevantSpecialties.includes(provider.specialty),\r\n        relevantSpecialties\r\n      };\r\n    })\r\n    .sort((a, b) => b.matchScore - a.matchScore)\r\n    .slice(0, 3);\r\n\r\n  return scoredProviders;\r\n};\r\n\r\n// Calculate distance between two coordinates (Haversine formula)\r\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n  const R = 3959; // Earth's radius in miles\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLon = (lon2 - lon1) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n    Math.sin(dLon/2) * Math.sin(dLon/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}