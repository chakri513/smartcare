{"ast":null,"code":"// Comprehensive validation utilities\nexport const validateSymptoms = symptoms => {\n  // If symptoms is an array, join to string\n  let symptomsStr = symptoms;\n  if (Array.isArray(symptoms)) {\n    symptomsStr = symptoms.join(', ');\n  }\n  if (!symptomsStr || symptomsStr.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please describe your symptoms'\n    };\n  }\n  if (symptomsStr.trim().length < 10) {\n    return {\n      isValid: false,\n      error: 'Please provide more detailed symptoms (at least 10 characters)'\n    };\n  }\n  if (symptomsStr.trim().length > 500) {\n    return {\n      isValid: false,\n      error: 'Symptoms description is too long (maximum 500 characters)'\n    };\n  }\n\n  // Check for potentially dangerous content\n  const dangerousPatterns = [/<script/i, /javascript:/i, /on\\w+\\s*=/i, /<iframe/i, /<object/i];\n  for (const pattern of dangerousPatterns) {\n    if (pattern.test(symptomsStr)) {\n      return {\n        isValid: false,\n        error: 'Invalid content detected in symptoms'\n      };\n    }\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateLocation = location => {\n  if (!location || location.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your location'\n    };\n  }\n  if (location.trim().length < 3) {\n    return {\n      isValid: false,\n      error: 'Location must be at least 3 characters'\n    };\n  }\n  if (location.trim().length > 100) {\n    return {\n      isValid: false,\n      error: 'Location is too long (maximum 100 characters)'\n    };\n  }\n  // Allow all common address characters, do not block spaces or special symbols\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateInsurance = insurance => {\n  const validInsurances = ['Apollo Munich', 'Bajaj Allianz', 'ICICI Lombard', 'Star Health', 'HDFC ERGO', 'Max Bupa', 'Religare', 'Cigna TTK'];\n  if (!insurance) {\n    return {\n      isValid: false,\n      error: 'Please select your insurance provider'\n    };\n  }\n  if (!validInsurances.includes(insurance)) {\n    return {\n      isValid: false,\n      error: 'Please select a valid insurance provider'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateAppointmentDate = date => {\n  if (!date) {\n    return {\n      isValid: false,\n      error: 'Please select an appointment date'\n    };\n  }\n  const selectedDate = new Date(date);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  if (selectedDate < today) {\n    return {\n      isValid: false,\n      error: 'Appointment date cannot be in the past'\n    };\n  }\n\n  // Check if date is within reasonable range (next 6 months)\n  const sixMonthsFromNow = new Date();\n  sixMonthsFromNow.setMonth(sixMonthsFromNow.getMonth() + 6);\n  if (selectedDate > sixMonthsFromNow) {\n    return {\n      isValid: false,\n      error: 'Appointment date cannot be more than 6 months in the future'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateAppointmentTime = time => {\n  if (!time) {\n    return {\n      isValid: false,\n      error: 'Please select an appointment time'\n    };\n  }\n  const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  if (!timePattern.test(time)) {\n    return {\n      isValid: false,\n      error: 'Please select a valid appointment time'\n    };\n  }\n  const [hours] = time.split(':');\n  const hour = parseInt(hours);\n\n  // Business hours: 9 AM to 6 PM\n  if (hour < 9 || hour >= 18) {\n    return {\n      isValid: false,\n      error: 'Appointments are only available between 9 AM and 6 PM'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const sanitizeInput = input => {\n  if (typeof input !== 'string') return input;\n  // Remove HTML tags\n  let sanitized = input.replace(/<[^>]*>/g, '');\n  // Remove potentially dangerous characters except spaces and address symbols\n  sanitized = sanitized.replace(/[<>\"'&]/g, '');\n  // Do NOT trim whitespace inside the string, only at the ends\n  sanitized = sanitized.replace(/^\\s+|\\s+$/g, '');\n  return sanitized;\n};\nexport const validateName = name => {\n  if (!name || name.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your name'\n    };\n  }\n  if (name.trim().length < 2) {\n    return {\n      isValid: false,\n      error: 'Name must be at least 2 characters long'\n    };\n  }\n  if (name.trim().length > 50) {\n    return {\n      isValid: false,\n      error: 'Name is too long (maximum 50 characters)'\n    };\n  }\n  const namePattern = /^[a-zA-Z\\s'-]+$/;\n  if (!namePattern.test(name.trim())) {\n    return {\n      isValid: false,\n      error: 'Name contains invalid characters'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateEmail = email => {\n  if (!email || email.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your email address'\n    };\n  }\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailPattern.test(email.trim())) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid email address'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validatePassword = password => {\n  if (!password || password.length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter a password'\n    };\n  }\n  if (password.length < 8) {\n    return {\n      isValid: false,\n      error: 'Password must be at least 8 characters long'\n    };\n  }\n  if (password.length > 128) {\n    return {\n      isValid: false,\n      error: 'Password is too long (maximum 128 characters)'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validatePhoneNumber = phone => {\n  if (!phone || phone.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your phone number'\n    };\n  }\n\n  // Remove all non-digit characters for validation\n  const digitsOnly = phone.replace(/\\D/g, '');\n  if (digitsOnly.length < 10) {\n    return {\n      isValid: false,\n      error: 'Phone number must have at least 10 digits'\n    };\n  }\n  if (digitsOnly.length > 15) {\n    return {\n      isValid: false,\n      error: 'Phone number is too long'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateZipCode = zipCode => {\n  if (!zipCode || zipCode.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your zip code'\n    };\n  }\n  const zipPattern = /^\\d{5}(-\\d{4})?$/;\n  if (!zipPattern.test(zipCode.trim())) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid zip code (e.g., 12345 or 12345-6789)'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validatePincode = pincode => {\n  if (!pincode || pincode.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your pincode'\n    };\n  }\n  const pincodePattern = /^\\d{6}$/;\n  if (!pincodePattern.test(pincode.trim())) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid 6-digit pincode'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateAge = age => {\n  if (!age || age.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your age'\n    };\n  }\n  const ageNum = parseInt(age);\n  if (isNaN(ageNum)) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid age'\n    };\n  }\n  if (ageNum < 1 || ageNum > 120) {\n    return {\n      isValid: false,\n      error: 'Age must be between 1 and 120 years'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateUserData = userData => {\n  const errors = {};\n  const symptomsValidation = validateSymptoms(userData.symptoms);\n  if (!symptomsValidation.isValid) {\n    errors.symptoms = symptomsValidation.error;\n  }\n  const locationValidation = validateLocation(userData.location);\n  if (!locationValidation.isValid) {\n    errors.location = locationValidation.error;\n  }\n  const insuranceValidation = validateInsurance(userData.insurance);\n  if (!insuranceValidation.isValid) {\n    errors.insurance = insuranceValidation.error;\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["validateSymptoms","symptoms","symptomsStr","Array","isArray","join","trim","length","isValid","error","dangerousPatterns","pattern","test","validateLocation","location","validateInsurance","insurance","validInsurances","includes","validateAppointmentDate","date","selectedDate","Date","today","setHours","sixMonthsFromNow","setMonth","getMonth","validateAppointmentTime","time","timePattern","hours","split","hour","parseInt","sanitizeInput","input","sanitized","replace","validateName","name","namePattern","validateEmail","email","emailPattern","validatePassword","password","validatePhoneNumber","phone","digitsOnly","validateZipCode","zipCode","zipPattern","validatePincode","pincode","pincodePattern","validateAge","age","ageNum","isNaN","validateUserData","userData","errors","symptomsValidation","locationValidation","insuranceValidation","Object","keys"],"sources":["D:/v1/frontend/src/utils/validation.js"],"sourcesContent":["// Comprehensive validation utilities\r\nexport const validateSymptoms = (symptoms) => {\r\n  // If symptoms is an array, join to string\r\n  let symptomsStr = symptoms;\r\n  if (Array.isArray(symptoms)) {\r\n    symptomsStr = symptoms.join(', ');\r\n  }\r\n  if (!symptomsStr || symptomsStr.trim().length === 0) {\r\n    return { isValid: false, error: 'Please describe your symptoms' };\r\n  }\r\n  \r\n  if (symptomsStr.trim().length < 10) {\r\n    return { isValid: false, error: 'Please provide more detailed symptoms (at least 10 characters)' };\r\n  }\r\n  \r\n  if (symptomsStr.trim().length > 500) {\r\n    return { isValid: false, error: 'Symptoms description is too long (maximum 500 characters)' };\r\n  }\r\n  \r\n  // Check for potentially dangerous content\r\n  const dangerousPatterns = [\r\n    /<script/i,\r\n    /javascript:/i,\r\n    /on\\w+\\s*=/i,\r\n    /<iframe/i,\r\n    /<object/i\r\n  ];\r\n  \r\n  for (const pattern of dangerousPatterns) {\r\n    if (pattern.test(symptomsStr)) {\r\n      return { isValid: false, error: 'Invalid content detected in symptoms' };\r\n    }\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateLocation = (location) => {\r\n  if (!location || location.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your location' };\r\n  }\r\n  \r\n  if (location.trim().length < 3) {\r\n    return { isValid: false, error: 'Location must be at least 3 characters' };\r\n  }\r\n  \r\n  if (location.trim().length > 100) {\r\n    return { isValid: false, error: 'Location is too long (maximum 100 characters)' };\r\n  }\r\n  // Allow all common address characters, do not block spaces or special symbols\r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateInsurance = (insurance) => {\r\n  const validInsurances = [\r\n    'Apollo Munich', 'Bajaj Allianz', 'ICICI Lombard', 'Star Health', \r\n    'HDFC ERGO', 'Max Bupa', 'Religare', 'Cigna TTK'\r\n  ];\r\n  \r\n  if (!insurance) {\r\n    return { isValid: false, error: 'Please select your insurance provider' };\r\n  }\r\n  \r\n  if (!validInsurances.includes(insurance)) {\r\n    return { isValid: false, error: 'Please select a valid insurance provider' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateAppointmentDate = (date) => {\r\n  if (!date) {\r\n    return { isValid: false, error: 'Please select an appointment date' };\r\n  }\r\n  \r\n  const selectedDate = new Date(date);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  if (selectedDate < today) {\r\n    return { isValid: false, error: 'Appointment date cannot be in the past' };\r\n  }\r\n  \r\n  // Check if date is within reasonable range (next 6 months)\r\n  const sixMonthsFromNow = new Date();\r\n  sixMonthsFromNow.setMonth(sixMonthsFromNow.getMonth() + 6);\r\n  \r\n  if (selectedDate > sixMonthsFromNow) {\r\n    return { isValid: false, error: 'Appointment date cannot be more than 6 months in the future' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateAppointmentTime = (time) => {\r\n  if (!time) {\r\n    return { isValid: false, error: 'Please select an appointment time' };\r\n  }\r\n  \r\n  const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\r\n  if (!timePattern.test(time)) {\r\n    return { isValid: false, error: 'Please select a valid appointment time' };\r\n  }\r\n  \r\n  const [hours] = time.split(':');\r\n  const hour = parseInt(hours);\r\n  \r\n  // Business hours: 9 AM to 6 PM\r\n  if (hour < 9 || hour >= 18) {\r\n    return { isValid: false, error: 'Appointments are only available between 9 AM and 6 PM' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const sanitizeInput = (input) => {\r\n  if (typeof input !== 'string') return input;\r\n  // Remove HTML tags\r\n  let sanitized = input.replace(/<[^>]*>/g, '');\r\n  // Remove potentially dangerous characters except spaces and address symbols\r\n  sanitized = sanitized.replace(/[<>\"'&]/g, '');\r\n  // Do NOT trim whitespace inside the string, only at the ends\r\n  sanitized = sanitized.replace(/^\\s+|\\s+$/g, '');\r\n  return sanitized;\r\n};\r\n\r\nexport const validateName = (name) => {\r\n  if (!name || name.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your name' };\r\n  }\r\n  \r\n  if (name.trim().length < 2) {\r\n    return { isValid: false, error: 'Name must be at least 2 characters long' };\r\n  }\r\n  \r\n  if (name.trim().length > 50) {\r\n    return { isValid: false, error: 'Name is too long (maximum 50 characters)' };\r\n  }\r\n  \r\n  const namePattern = /^[a-zA-Z\\s'-]+$/;\r\n  if (!namePattern.test(name.trim())) {\r\n    return { isValid: false, error: 'Name contains invalid characters' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateEmail = (email) => {\r\n  if (!email || email.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your email address' };\r\n  }\r\n  \r\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailPattern.test(email.trim())) {\r\n    return { isValid: false, error: 'Please enter a valid email address' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validatePassword = (password) => {\r\n  if (!password || password.length === 0) {\r\n    return { isValid: false, error: 'Please enter a password' };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    return { isValid: false, error: 'Password must be at least 8 characters long' };\r\n  }\r\n  \r\n  if (password.length > 128) {\r\n    return { isValid: false, error: 'Password is too long (maximum 128 characters)' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validatePhoneNumber = (phone) => {\r\n  if (!phone || phone.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your phone number' };\r\n  }\r\n  \r\n  // Remove all non-digit characters for validation\r\n  const digitsOnly = phone.replace(/\\D/g, '');\r\n  \r\n  if (digitsOnly.length < 10) {\r\n    return { isValid: false, error: 'Phone number must have at least 10 digits' };\r\n  }\r\n  \r\n  if (digitsOnly.length > 15) {\r\n    return { isValid: false, error: 'Phone number is too long' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateZipCode = (zipCode) => {\r\n  if (!zipCode || zipCode.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your zip code' };\r\n  }\r\n  \r\n  const zipPattern = /^\\d{5}(-\\d{4})?$/;\r\n  if (!zipPattern.test(zipCode.trim())) {\r\n    return { isValid: false, error: 'Please enter a valid zip code (e.g., 12345 or 12345-6789)' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validatePincode = (pincode) => {\r\n  if (!pincode || pincode.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your pincode' };\r\n  }\r\n  \r\n  const pincodePattern = /^\\d{6}$/;\r\n  if (!pincodePattern.test(pincode.trim())) {\r\n    return { isValid: false, error: 'Please enter a valid 6-digit pincode' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateAge = (age) => {\r\n  if (!age || age.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your age' };\r\n  }\r\n  \r\n  const ageNum = parseInt(age);\r\n  if (isNaN(ageNum)) {\r\n    return { isValid: false, error: 'Please enter a valid age' };\r\n  }\r\n  \r\n  if (ageNum < 1 || ageNum > 120) {\r\n    return { isValid: false, error: 'Age must be between 1 and 120 years' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateUserData = (userData) => {\r\n  const errors = {};\r\n  \r\n  const symptomsValidation = validateSymptoms(userData.symptoms);\r\n  if (!symptomsValidation.isValid) {\r\n    errors.symptoms = symptomsValidation.error;\r\n  }\r\n  \r\n  const locationValidation = validateLocation(userData.location);\r\n  if (!locationValidation.isValid) {\r\n    errors.location = locationValidation.error;\r\n  }\r\n  \r\n  const insuranceValidation = validateInsurance(userData.insurance);\r\n  if (!insuranceValidation.isValid) {\r\n    errors.insurance = insuranceValidation.error;\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}