{"ast":null,"code":"// Comprehensive validation utilities\nexport const validateSymptoms = symptoms => {\n  if (!symptoms || symptoms.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please describe your symptoms'\n    };\n  }\n  if (symptoms.trim().length < 10) {\n    return {\n      isValid: false,\n      error: 'Please provide more detailed symptoms (at least 10 characters)'\n    };\n  }\n  if (symptoms.trim().length > 500) {\n    return {\n      isValid: false,\n      error: 'Symptoms description is too long (maximum 500 characters)'\n    };\n  }\n\n  // Check for potentially dangerous content\n  const dangerousPatterns = [/<script/i, /javascript:/i, /on\\w+\\s*=/i, /<iframe/i, /<object/i];\n  for (const pattern of dangerousPatterns) {\n    if (pattern.test(symptoms)) {\n      return {\n        isValid: false,\n        error: 'Invalid content detected in symptoms'\n      };\n    }\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateLocation = location => {\n  if (!location || location.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Please enter your location'\n    };\n  }\n  if (location.trim().length < 3) {\n    return {\n      isValid: false,\n      error: 'Location must be at least 3 characters'\n    };\n  }\n  if (location.trim().length > 100) {\n    return {\n      isValid: false,\n      error: 'Location is too long (maximum 100 characters)'\n    };\n  }\n\n  // Basic location format validation\n  const locationPattern = /^[a-zA-Z\\s,.-]+$/;\n  if (!locationPattern.test(location.trim())) {\n    return {\n      isValid: false,\n      error: 'Location contains invalid characters'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateInsurance = insurance => {\n  const validInsurances = ['Aetna', 'Blue Cross', 'Cigna', 'UnitedHealth'];\n  if (!insurance) {\n    return {\n      isValid: false,\n      error: 'Please select your insurance provider'\n    };\n  }\n  if (!validInsurances.includes(insurance)) {\n    return {\n      isValid: false,\n      error: 'Please select a valid insurance provider'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateAppointmentDate = date => {\n  if (!date) {\n    return {\n      isValid: false,\n      error: 'Please select an appointment date'\n    };\n  }\n  const selectedDate = new Date(date);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  if (selectedDate < today) {\n    return {\n      isValid: false,\n      error: 'Appointment date cannot be in the past'\n    };\n  }\n\n  // Check if date is within reasonable range (next 6 months)\n  const sixMonthsFromNow = new Date();\n  sixMonthsFromNow.setMonth(sixMonthsFromNow.getMonth() + 6);\n  if (selectedDate > sixMonthsFromNow) {\n    return {\n      isValid: false,\n      error: 'Appointment date cannot be more than 6 months in the future'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const validateAppointmentTime = time => {\n  if (!time) {\n    return {\n      isValid: false,\n      error: 'Please select an appointment time'\n    };\n  }\n  const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  if (!timePattern.test(time)) {\n    return {\n      isValid: false,\n      error: 'Please select a valid appointment time'\n    };\n  }\n  const [hours] = time.split(':');\n  const hour = parseInt(hours);\n\n  // Business hours: 9 AM to 6 PM\n  if (hour < 9 || hour >= 18) {\n    return {\n      isValid: false,\n      error: 'Appointments are only available between 9 AM and 6 PM'\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport const sanitizeInput = input => {\n  if (typeof input !== 'string') return input;\n\n  // Remove HTML tags\n  let sanitized = input.replace(/<[^>]*>/g, '');\n\n  // Remove potentially dangerous characters\n  sanitized = sanitized.replace(/[<>\\\"'&]/g, '');\n\n  // Trim whitespace\n  sanitized = sanitized.trim();\n  return sanitized;\n};\nexport const validateUserData = userData => {\n  const errors = {};\n  const symptomsValidation = validateSymptoms(userData.symptoms);\n  if (!symptomsValidation.isValid) {\n    errors.symptoms = symptomsValidation.error;\n  }\n  const locationValidation = validateLocation(userData.location);\n  if (!locationValidation.isValid) {\n    errors.location = locationValidation.error;\n  }\n  const insuranceValidation = validateInsurance(userData.insurance);\n  if (!insuranceValidation.isValid) {\n    errors.insurance = insuranceValidation.error;\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["validateSymptoms","symptoms","trim","length","isValid","error","dangerousPatterns","pattern","test","validateLocation","location","locationPattern","validateInsurance","insurance","validInsurances","includes","validateAppointmentDate","date","selectedDate","Date","today","setHours","sixMonthsFromNow","setMonth","getMonth","validateAppointmentTime","time","timePattern","hours","split","hour","parseInt","sanitizeInput","input","sanitized","replace","validateUserData","userData","errors","symptomsValidation","locationValidation","insuranceValidation","Object","keys"],"sources":["D:/v1/src/utils/validation.js"],"sourcesContent":["// Comprehensive validation utilities\r\nexport const validateSymptoms = (symptoms) => {\r\n  if (!symptoms || symptoms.trim().length === 0) {\r\n    return { isValid: false, error: 'Please describe your symptoms' };\r\n  }\r\n  \r\n  if (symptoms.trim().length < 10) {\r\n    return { isValid: false, error: 'Please provide more detailed symptoms (at least 10 characters)' };\r\n  }\r\n  \r\n  if (symptoms.trim().length > 500) {\r\n    return { isValid: false, error: 'Symptoms description is too long (maximum 500 characters)' };\r\n  }\r\n  \r\n  // Check for potentially dangerous content\r\n  const dangerousPatterns = [\r\n    /<script/i,\r\n    /javascript:/i,\r\n    /on\\w+\\s*=/i,\r\n    /<iframe/i,\r\n    /<object/i\r\n  ];\r\n  \r\n  for (const pattern of dangerousPatterns) {\r\n    if (pattern.test(symptoms)) {\r\n      return { isValid: false, error: 'Invalid content detected in symptoms' };\r\n    }\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateLocation = (location) => {\r\n  if (!location || location.trim().length === 0) {\r\n    return { isValid: false, error: 'Please enter your location' };\r\n  }\r\n  \r\n  if (location.trim().length < 3) {\r\n    return { isValid: false, error: 'Location must be at least 3 characters' };\r\n  }\r\n  \r\n  if (location.trim().length > 100) {\r\n    return { isValid: false, error: 'Location is too long (maximum 100 characters)' };\r\n  }\r\n  \r\n  // Basic location format validation\r\n  const locationPattern = /^[a-zA-Z\\s,.-]+$/;\r\n  if (!locationPattern.test(location.trim())) {\r\n    return { isValid: false, error: 'Location contains invalid characters' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateInsurance = (insurance) => {\r\n  const validInsurances = ['Aetna', 'Blue Cross', 'Cigna', 'UnitedHealth'];\r\n  \r\n  if (!insurance) {\r\n    return { isValid: false, error: 'Please select your insurance provider' };\r\n  }\r\n  \r\n  if (!validInsurances.includes(insurance)) {\r\n    return { isValid: false, error: 'Please select a valid insurance provider' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateAppointmentDate = (date) => {\r\n  if (!date) {\r\n    return { isValid: false, error: 'Please select an appointment date' };\r\n  }\r\n  \r\n  const selectedDate = new Date(date);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  if (selectedDate < today) {\r\n    return { isValid: false, error: 'Appointment date cannot be in the past' };\r\n  }\r\n  \r\n  // Check if date is within reasonable range (next 6 months)\r\n  const sixMonthsFromNow = new Date();\r\n  sixMonthsFromNow.setMonth(sixMonthsFromNow.getMonth() + 6);\r\n  \r\n  if (selectedDate > sixMonthsFromNow) {\r\n    return { isValid: false, error: 'Appointment date cannot be more than 6 months in the future' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const validateAppointmentTime = (time) => {\r\n  if (!time) {\r\n    return { isValid: false, error: 'Please select an appointment time' };\r\n  }\r\n  \r\n  const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\r\n  if (!timePattern.test(time)) {\r\n    return { isValid: false, error: 'Please select a valid appointment time' };\r\n  }\r\n  \r\n  const [hours] = time.split(':');\r\n  const hour = parseInt(hours);\r\n  \r\n  // Business hours: 9 AM to 6 PM\r\n  if (hour < 9 || hour >= 18) {\r\n    return { isValid: false, error: 'Appointments are only available between 9 AM and 6 PM' };\r\n  }\r\n  \r\n  return { isValid: true, error: null };\r\n};\r\n\r\nexport const sanitizeInput = (input) => {\r\n  if (typeof input !== 'string') return input;\r\n  \r\n  // Remove HTML tags\r\n  let sanitized = input.replace(/<[^>]*>/g, '');\r\n  \r\n  // Remove potentially dangerous characters\r\n  sanitized = sanitized.replace(/[<>\\\"'&]/g, '');\r\n  \r\n  // Trim whitespace\r\n  sanitized = sanitized.trim();\r\n  \r\n  return sanitized;\r\n};\r\n\r\nexport const validateUserData = (userData) => {\r\n  const errors = {};\r\n  \r\n  const symptomsValidation = validateSymptoms(userData.symptoms);\r\n  if (!symptomsValidation.isValid) {\r\n    errors.symptoms = symptomsValidation.error;\r\n  }\r\n  \r\n  const locationValidation = validateLocation(userData.location);\r\n  if (!locationValidation.isValid) {\r\n    errors.location = locationValidation.error;\r\n  }\r\n  \r\n  const insuranceValidation = validateInsurance(userData.insurance);\r\n  if (!insuranceValidation.isValid) {\r\n    errors.insurance = insuranceValidation.error;\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}